// üì¶ –ò–º–ø–æ—Ä—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import 'dart:convert';                    // –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON (encode/decode)
import 'package:http/http.dart' as http; // –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
import 'package:flutter_dotenv/flutter_dotenv.dart';


// üöÄ –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å OpenAI API
class OpenAIService {
  // üîê –£–∫–∞–∂–∏ —Å–≤–æ–π OpenAI API-–∫–ª—é—á –∑–¥–µ—Å—å
static final String apiKey = dotenv.env['OPENAI_API_KEY'] ?? '';

  // üåç –ê–¥—Ä–µ—Å –¥–ª—è POST-–∑–∞–ø—Ä–æ—Å–∞ –∫ Chat Completions API (GPT)
  static const String endpoint = 'https://api.openai.com/v1/chat/completions';

  /// üì° –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏–∑–±–µ–≥–∞—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤
  static Future<Map<String, dynamic>?> getUniqueWordData(
    String category,
    Set<String> usedWords,
  ) async {
    // üß† –°–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT
    final prompt = _buildPrompt(category, usedWords);

    // üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –≤ OpenAI
    final response = await http.post(
      Uri.parse(endpoint), // URL-–∞–¥—Ä–µ—Å
      headers: {
        'Content-Type': 'application/json',     // –¢–∏–ø –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        'Authorization': 'Bearer $apiKey',      // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –∫–ª—é—á—É
      },
      body: jsonEncode({
        "model": "gpt-3.5-turbo",               // –ú–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        "messages": [
          {
            "role": "user",                    // –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            "content": prompt                  // –ü—Ä–æ–º–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
          }
        ],
        "temperature": 0.7                     // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ‚Äî –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
      }),
    );

    // ‚úÖ –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω (–∫–æ–¥ 200)
    if (response.statusCode == 200) {
      try {
        // üì• –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º content (JSON –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏)
        final content = jsonDecode(response.body)['choices'][0]['message']['content'];

        // üì§ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É JSON –≤ –∫–∞—Ä—Ç—É –¥–∞–Ω–Ω—ã—Ö (Map)
        return jsonDecode(content);
      } catch (e) {
        // ‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ JSON
        print('‚ùå JSON parsing error: $e');
        return null;
      }
    } else {
      // üß® –ï—Å–ª–∏ OpenAI –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 401, 429 –∏ —Ç.–¥.)
      print('‚ùå OpenAI API error: ${response.statusCode}');
      return null;
    }
  }
  /// üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è GPT
  static String _buildPrompt(String category, Set<String> usedWords) {
    // üßº –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ–ª–∞–µ–º —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã
    final cleanedCategory = category.trim().toLowerCase();

    // üö´ –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å
    final exclusions = usedWords.isNotEmpty
        ? 'Do NOT use any of these words: ${usedWords.map((w) => '"$w"').join(', ')}'
        : '';

    // ‚úçÔ∏è –°–∞–º –ø—Ä–æ–º–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π GPT –ø–æ–ª—É—á–∏—Ç –∫–∞–∫ –∑–∞–¥–∞—á—É
    return '''
You are a vocabulary trainer assistant.

Generate a **concrete English noun** related to "$cleanedCategory" and return:
- 5 short hints (useful, descriptive, beginner-friendly)
- A scrambled version of the word

$exclusions

‚ö†Ô∏è Respond only in this exact JSON format:
{
  "word": "example",
  "hints": ["Hint 1", "Hint 2", "Hint 3", "Hint 4", "Hint 5"],
  "scrambled": "elpmaxe"
}

No explanation. No intro. Only valid JSON.
''';
  }
}
